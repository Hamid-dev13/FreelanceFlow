console.log("Signup route loaded");

// src/app/api/auth/signup/route.ts
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import bcrypt from "bcryptjs";
import { signJWT } from "@/lib/auth/jwt";

export async function POST(req: Request) {
    try {
        console.log("üîπ Requ√™te re√ßue pour inscription");
        console.log('üîç Diagnostic des d√©pendances :', {
            bcryptjsVersion: require('bcryptjs/package.json').version,
            prismaVersion: require('@prisma/client/package.json').version,
            nodeVersion: process.version
        })
        console.log('üîç Variables environnement :', {
            DATABASE_URL: process.env.DATABASE_URL ? '‚úÖ Pr√©sent' : '‚ùå Manquant',
            JWT_SECRET: process.env.JWT_SECRET ? '‚úÖ Pr√©sent' : '‚ùå Manquant'
        });
        const { email, password, name, role } = await req.json();
        console.log("üîπ Donn√©es re√ßues :", { email, password: "********", name });

        // Ajoutons la validation du mot de passe apr√®s la validation basique :
        if (!email || !password || !name) {
            console.warn("‚ö†Ô∏è Champs manquants");
            return NextResponse.json(
                { error: "Missing required fields" },
                { status: 400 }
            );
        }
        const errors = [];
        if (password.length < 8) errors.push("Au moins 8 caract√®res");
        if (!/[A-Z]/.test(password)) errors.push("Au moins une majuscule");
        if (!/[0-9]/.test(password)) errors.push("Au moins un chiffre");
        if (!/[!@#$%^&*(),.?":{}|<>]/.test(password)) errors.push("Au moins un caract√®re sp√©cial");

        if (errors.length > 0) {
            console.warn("‚ö†Ô∏è Mot de passe invalide:", errors);
            return NextResponse.json({
                error: "Mot de passe invalide: " + errors.join(", ")
            }, { status: 400 });
        }

        // V√©rifier si l'utilisateur existe
        console.log("üîπ V√©rification de l'existence de l'utilisateur...");
        // Apr√®s les v√©rifications du mot de passe
        if (role && !['DEVELOPER', 'PROJECT_MANAGER'].includes(role)) {
            return NextResponse.json(
                { error: "Invalid role" },
                { status: 400 }
            );
        }
        const existingUser = await prisma.user.findUnique({
            where: { email }
        });

        if (existingUser) {
            console.warn("‚ö†Ô∏è Utilisateur d√©j√† existant :", email);
            return NextResponse.json(
                { error: "User already exists" },
                { status: 400 }
            );
        }

        // Hasher le mot de passe
        console.log("üîπ Hashing du mot de passe...");
        const hashedPassword = await bcrypt.hash(password, 10);
        console.log("üîπ Mot de passe hash√© avec succ√®s");

        // Cr√©er l'utilisateur
        console.log("üîπ Cr√©ation de l'utilisateur...");
        const user = await prisma.user.create({
            data: {
                email,
                password: hashedPassword,
                name,
                role: role || 'DEVELOPER',
            },
        });
        console.log("‚úÖ Utilisateur cr√©√© avec succ√®s :", user);

        // G√©n√©rer le token
        console.log("üîπ G√©n√©ration du token JWT...");
        const token = await signJWT({ userId: user.id, email: user.email, role: role });
        console.log("‚úÖ Token g√©n√©r√© :", token);

        return NextResponse.json({ token }, { status: 201 });
    } catch (error) {
        console.error("‚ùå Erreur lors de l'inscription :", error);
        return NextResponse.json(
            { error: "Error creating user" },
            { status: 500 }
        );
    }
}
